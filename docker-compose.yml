services:
  cache-db:
    image: redis
    ports:
      - 6379:6379
    networks:
      - backend
  users-db:
    image: mongo
    environment:
      MONGO_INITDB_ROOT_USERNAME: username
      MONGO_INITDB_ROOT_PASSWORD: password
      MONGO_INITDB_DATABASE: users-service
    ports:
      - 27017:27017
    networks:
      - backend

  orders-db:
    image: mongo
    environment:
      MONGO_INITDB_ROOT_USERNAME: username
      MONGO_INITDB_ROOT_PASSWORD: password
      MONGO_INITDB_DATABASE: orders-service
    ports:
      - 27018:27017
    networks:
      - backend

  products-db:
    image: mongo
    environment:
      MONGO_INITDB_ROOT_USERNAME: username
      MONGO_INITDB_ROOT_PASSWORD: password
      MONGO_INITDB_DATABASE: products-service
    ports:
      - 27019:27017
    networks:
      - backend

  notifications-db:
    image: mongo
    environment:
      MONGO_INITDB_ROOT_USERNAME: username
      MONGO_INITDB_ROOT_PASSWORD: password
      MONGO_INITDB_DATABASE: notifications-service
    ports:
      - 27020:27017
    networks:
      - backend

  

  kafka:
    image: wurstmeister/kafka
    ports:
      - 9092:9092
    environment:
      KAFKA_CREATE_TOPICS: "order-events:1:1,inventory-events:1:1, notification-events:1:1"
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    depends_on:
      - zookeeper
    networks:
      - backend

  zookeeper:
    image: wurstmeister/zookeeper
    ports:
      - 2181:2181
    networks:
      - backend

  users-service:
    build:
      context: ./services/users
      dockerfile: Dockerfile
    environment:
      API_SECRET: secret
      KAFKA_BROKERS: kafka:9092
      MONGO_URI: mongodb://username:password@users-db:27017/users-service?authSource=admin
      USERS_SERVICE_PORT: "8000"
    ports:
      - "8001:8000"
    
    depends_on:
      - users-db
      - kafka
    networks:
      - backend

  orders-service:
    build:
      context: ./services/orders
      dockerfile: Dockerfile
    environment:
      KAFKA_BROKERS: kafka:9092
      ORDERS_SERVICE_PORT: 8000
      USERS_SERVICE_URL: http://users-service:8000
      PRODUCTS_SERVICE_URL: http://products-service:8000
      MONGO_URI: mongodb://username:password@orders-db:27017/orders-service?authSource=admin
    ports:
      - 8002:8000
    depends_on:
      - orders-db
      - kafka
    networks:
      - backend

  products-service:
    build:
      context: ./services/products
      dockerfile: Dockerfile
    environment:
      PRODUCTS_SERVICE_PORT: 8000
      KAFKA_BROKERS: kafka:9092
      MONGO_URI: mongodb://username:password@products-db:27017/products-service?authSource=admin
    ports:
      - 8003:8000
    depends_on:
      - products-db
      - kafka
    networks:
      - backend
  
  notifications-service:
    build:
      context: ./services/notifications
      dockerfile: Dockerfile
    environment:
      NOTIFICATIONS_SERVICE_PORT: 8000
      KAFKA_BROKERS: kafka:9092
      MONGO_URI: mongodb://username:password@notifications-db:27017/notifications-service?authSource=admin
      SMTP_HOST: 'smtp.gmail.com'
      SMTP_PORT: '587'
      SMTP_SECURE: 'false' 
      SMTP_USER: 'rushabhkhatri748@gmail.com'
      SMTP_PASS: 'bxsd qvhc nxeb mrpm'
      SENDER_EMAIL: 'rushabhmistry16@gmail.com'
      USERS_SERVICE_URL: 'http://users-service:8000'

    ports:
      - 8004:8000
    depends_on:
      - notifications-db
      - kafka
    networks:
      - backend

  recommendations-service:
    build:
      context: ./services/recommendations
      dockerfile: Dockerfile
    environment:
      RECOMMENDATIONS_SERVICE_PORT: 8000
      KAFKA_BROKERS: kafka:9092
      USERS_SERVICE_URL: http://users-service:8000
      PRODUCTS_SERVICE_URL: http://products-service:8000
      ORDERS_SERVICE_URL: http://orders-service:8000
      REDIS_URL: redis://cache-db:6379

      
    ports:
      - 8005:8000
    depends_on:
      - cache-db
      - users-service
      - products-service
      - orders-service
      - kafka
    networks:
      - backend


  api-gateway:
    build:
      context: ./gateway
      dockerfile: Dockerfile
    environment:
      API_SECRET: secret
      USERS_SERVICE_URL: http://users-service:8000
      ORDERS_SERVICE_URL: http://orders-service:8000
      PRODUCTS_SERVICE_URL: http://products-service:8000
      REDIS_URL: redis://cache-db:6379
      KAFKA_BROKERS: kafka:9092
      PORT: "4000"
    ports:
      - "4000:4000"
    depends_on:
      - users-service
      - orders-service
      - products-service
      - cache-db
      - kafka
    networks:
      - backend

  prometheus:
    image: prom/prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'

  grafana:
    image: grafana/grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=password
    volumes:
      - grafana-storage:/var/lib/grafana

networks:
  backend:

volumes:
  grafana-storage: